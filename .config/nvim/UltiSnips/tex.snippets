global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal

#################
#  Environments #
#################

snippet beg "begin / end" bA
\begin{${1}}
	${0}
\end{$1}
endsnippet

snippet pro "proof"
\begin{proof}
	${0}
\end{proof}
endsnippet

snippet mpro "Math Proof"
\begin{proof}
	${1}
	\begin{align*}
		${0}
	\end{align*}
\end{proof}
endsnippet

snippet thm "Theorem"
\begin{thm}
	${1}
\end{thm}

${0}
endsnippet

snippet defn "Definition"
\begin{defn}
	${1}
\end{defn}

${0}
endsnippet

snippet exmp "Example"
\begin{exmp}
	${1}
\end{exmp}

${0}
endsnippet


snippet rem "Remark"
\begin{rem}
	${1}
\end{rem}

${0}
endsnippet

snippet pgf "PGFPlot"

\begin{figure}
	\centering
	\begin{tikzpicture}
	\begin{axis}[
		xlabel=${1:$x$}, 
		ylabel=${2:$y$},
	]
		${3}
	\end{axis}
	\end{tikzpicture}
	\caption{${4}}
\end{figure}

${0}
endsnippet

snippet plot "Plot"
\addplot+ [domain=${1:0:10}], samples=${2:100}] {${3}};

${0}
endsnippet

snippet enum "Enumerate"
\begin{enumerate}
	\item ${0}
\end{enumerate}
endsnippet

snippet qenum "Questions Enumerate"
\begin{enumerate}[leftmargin=\labelsep]
	\item ${0}
\end{enumerate}
endsnippet

snippet qpenum "Question Parts Enumerate"
\begin{enumerate}[label=(\alph*)]
	\item ${0}
\end{enumerate}
endsnippet

snippet item "Itemize"
\begin{itemize}
	\item ${0}
\end{itemize}
endsnippet

# Courtesy of Gilles Castel 
snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet sec "Section" b
\section{${1:section name}}
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet subsec "Subsection" b
\subsection{${1:subsection name}}
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet ssubsec "Subsubsection" b
\subsubsection{${1:subsubsection name}}
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet al "Align*"
\begin{align*}
	${0}
\end{align*}
endsnippet

snippet // "Fraction"
\frac{$1}{$2}$0
endsnippet

snippet = "Equals"
&= ${1}\\\
${0}
endsnippet

# Courtesy of Cilles Castel
snippet mat "Matrix"
\begin{${1:p/b/v/V/B/small}matrix}
	${2}
\end{$1matrix} ${0}
endsnippet

snippet twomat "Matrix"
\begin{${1:p/b/v/V/B/small}matrix}
	${2} & ${3} \\\
	${4} & ${5} 
\end{$1matrix} ${0}
endsnippet

snippet threemat "Matrix"
\begin{${1:p/b/v/V/B/small}matrix}
	${2} & ${3} & ${5} \\\
	${6} & ${7} & ${8} \\\
	${9} & ${9} & ${9}
\end{$1matrix} ${0}
endsnippet

snippet lr "Left-Right Brackets"
\left( ${1} \right) ${0}
endsnippet

snippet lrs "Left-Right Square Brackets"
\left[ ${1} \right] ${0}
endsnippet

snippet lrc "Left-Right Curly Braces"
\left\\{ ${1} \right\\} ${0}
endsnippet

snippet lra "Angle Brackets"
\langle ${1}, ${2} \rangle ${0}
endsnippet

snippet setb "Set Builder"
\left\\{ ${1} | ${2} \right\\} ${0}
endsnippet

snippet setbp "Set Builder"
\left\\{ (${1}, ${2}) | ${3} \right\\} ${0}
endsnippet

snippet { "Curley Braces"
\{ ${1} \} ${0}
endsnippet

## Sums/Integrals/Ect... ##
snippet int "Integral"
\int ${1} \, d${2} ${0}
endsnippet

snippet dint "Integral"
\int_{${1}}^{${2}} ${3} \, d${4} ${0}
endsnippet

snippet arint "Double Integral"
\iint_{${1:D}} ${2} \, d${3:A} ${0}
endsnippet

snippet doint "Integral"
\int_{${1}}^{${2}} \int_{${3}}^{${4}} ${5} \, d${6} d${7} ${0}
endsnippet

snippet trint "Integral"
\int_{${1}}^{${2}} \int_{${3}}^{${4}} \int_{${5}}^{${6}} ${7} \, d${8} d${9} d${10} ${0}
endsnippet

snippet voint "Integral"
\iiint_{${1:D}} ${2} \, d${3:V} ${0}
endsnippet

snippet sum "Sum"
\sum_{${1:i=0}}^{${2:n}} ${3}
endsnippet

snippet lim "Limit"
\lim_{${1:n} \to ${2:\infty}} ${0}
endsnippet

snippet ddx "d/dx"
\frac{d${1:}}{d${2:x}} ${0}
endsnippet

snippet par "Partial Deriviative"
\frac{\partial ${1:}}{\partial ${2:x}} ${0}
endsnippet

snippet sqrt "Square Root"
\sqrt{${1}} ${0}
endsnippet

snippet pow "Power"
^{${1}} ${0}
endsnippet

snippet _ "Subscript"
_{${1}} ${0}
endsnippet

snippet dot "Dot Derivative"
\dot{${1}} ${0}
endsnippet

snippet eq "Equation"

\[ ${1} \] 

${0}
endsnippet

snippet xn "xn"
x_n
endsnippet

snippet yn "yn"
y_n
endsnippet

snippet xi "xi"
x_i
endsnippet

snippet RR "matbb R"
\mathbb{R}
endsnippet

snippet NN "mathbb N"
\mathbb{N}
endsnippet

snippet QQ "mathbb Q"
\mathbb{Q}
endsnippet

snippet ZZ "mathbb Z"
\mathbb{Z}
endsnippet

snippet FF "mathbb F"
\mathbb{F}
endsnippet

snippet bs "Brackets Squared"
\left( ${1} \right)^2 ${0}
endsnippet

################
# Nifty Tricks #
################

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sp "^2" iA
^2
endsnippet

context "math()"
snippet cp "^3" iA
^3
endsnippet

context "math()"
snippet pw "superscript" iA
^{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

snippet '\$' "Inline Math" wrA
$ ${1} $ ${0}
endsnippet

context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet


context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet


context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet


context "math()"
priority 10
snippet "vec" "hat" riA
\vec{$1}$0
endsnippet


context "math()"
priority 100
snippet "([a-zA-Z])vec" "hat" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

snippet fun "function"
${1: f}: ${2: \mathbb{R}} \to ${3: \mathbb{R}} ${0}
endsnippet

context "math()"
snippet " in" "in" riA
\in
endsnippet

snippet restr "restrictions"
${1}_{\mkern 1mu \vrule height 2ex\mkern2mu ${2}} ${0}
endsnippet
